#!/usr/bin/env python3
"""
Test PII Masking/Unmasking System
Demonstrates how PII is masked and can be unmasked using key-value mappings
"""

import sys
import os
sys.path.append('./backend')

from security_guard import SecurityGuard

def test_pii_masking_unmasking():
    """Test the complete PII masking and unmasking system"""
    
    print("üîê Testing PII Masking/Unmasking System")
    print("=" * 60)
    
    # Initialize security guard
    print("\n1Ô∏è‚É£ Initializing Security Guard with PII Mapping...")
    security_guard = SecurityGuard()
    
    # Create a PII mapping session
    session_id = security_guard.create_pii_mapping_session("test_session_001")
    print(f"‚úÖ Created PII mapping session: {session_id}")
    
    # Test content with various PII types
    test_content = """
    Customer Information:
    - Name: John Smith
    - Email: john.doe@example.com
    - Phone: (555) 123-4567
    - SSN: 123-45-6789
    - Credit Card: 1234-5678-9012-3456
    - Address: 123 Main Street, New York, NY 10001
    - Date of Birth: 01/15/1990
    """
    
    print(f"\n2Ô∏è‚É£ Original Content with PII:")
    print(test_content)
    
    # Detect PII
    print(f"\n3Ô∏è‚É£ Detecting PII...")
    pii_findings = security_guard.detect_pii(test_content, "customer_data")
    
    if pii_findings['detected']:
        print(f"‚úÖ PII Detected: {pii_findings['pii_types']}")
        print(f"üìä Risk Level: {pii_findings['risk_level']}")
        print(f"üìù Items Found: {len(pii_findings['sensitive_data'])}")
        
        # Show what will be masked/removed
        for item in pii_findings['sensitive_data']:
            print(f"  - {item['type']}: {item['value']} (Risk: {item['risk_level']})")
    else:
        print("‚ùå No PII detected")
        return
    
    # Sanitize content (this will also store mappings)
    print(f"\n4Ô∏è‚É£ Sanitizing Content...")
    sanitized_content, sanitization_report = security_guard.sanitize_content_for_embedding(
        test_content, "customer_data"
    )
    
    print(f"‚úÖ Sanitization Report:")
    print(f"  - Original Length: {sanitization_report['original_length']}")
    print(f"  - Sanitized Length: {sanitization_report['sanitized_length']}")
    print(f"  - PII Removed: {sanitization_report['pii_removed']}")
    print(f"  - PII Masked: {sanitization_report['pii_masked']}")
    
    print(f"\n5Ô∏è‚É£ Sanitized Content:")
    print(sanitized_content)
    
    # Show stored mappings
    print(f"\n6Ô∏è‚É£ Stored PII Mappings:")
    mapping_session = security_guard.get_pii_mapping_session()
    print(f"Session ID: {mapping_session['session_id']}")
    print(f"Timestamp: {mapping_session['timestamp']}")
    print(f"Total Mappings: {mapping_session['total_mappings']}")
    
    # Get detailed mappings
    mappings = security_guard.get_pii_mappings()
    print(f"\nDetailed Mappings:")
    for mapping_key, mapping_data in mappings['mappings'].items():
        print(f"  - {mapping_data['pii_type']}: {mapping_data['original']} ‚Üí {mapping_data['masked']}")
    
    # Test unmasking
    print(f"\n7Ô∏è‚É£ Testing Unmasking...")
    unmasked_content, unmask_report = security_guard.unmask_pii(sanitized_content)
    
    print(f"‚úÖ Unmasking Report:")
    print(f"  - Unmasked Count: {unmask_report['unmasked_count']}")
    print(f"  - Errors: {unmask_report['errors']}")
    print(f"  - Session ID: {unmask_report['session_id']}")
    
    print(f"\n8Ô∏è‚É£ Unmasked Content:")
    print(unmasked_content)
    
    # Verify unmasking worked
    print(f"\n9Ô∏è‚É£ Verification:")
    if unmasked_content == test_content:
        print("‚úÖ SUCCESS: Unmasked content matches original content!")
    else:
        print("‚ùå FAILURE: Unmasked content does not match original")
        print("Original:")
        print(test_content)
        print("Unmasked:")
        print(unmasked_content)
    
    # Test specific unmasking scenarios
    print(f"\nüîü Testing Specific Unmasking Scenarios...")
    
    # Test unmasking just emails
    email_mappings = security_guard.get_pii_mappings(pii_type='email')
    print(f"Email Mappings: {len(email_mappings['mappings'])}")
    for key, data in email_mappings['mappings'].items():
        print(f"  - {data['original']} ‚Üí {data['masked']}")
    
    # Test unmasking just SSNs
    ssn_mappings = security_guard.get_pii_mappings(pii_type='ssn')
    print(f"SSN Mappings: {len(ssn_mappings['mappings'])}")
    for key, data in ssn_mappings['mappings'].items():
        print(f"  - {data['original']} ‚Üí {data['masked']}")
    
    # Test unmasking by context
    context_mappings = security_guard.get_pii_mappings(context='customer_data')
    print(f"Customer Data Context Mappings: {len(context_mappings['mappings'])}")
    
    # Test clearing mappings
    print(f"\n1Ô∏è‚É£1Ô∏è‚É£ Testing Mapping Cleanup...")
    security_guard.clear_pii_mappings()
    
    # Try to unmask after clearing (should fail)
    unmasked_after_clear, clear_report = security_guard.unmask_pii(sanitized_content)
    print(f"Unmasking after clear: {clear_report['unmasked_count']} items")
    print(f"Errors: {clear_report['errors']}")
    
    # Show how the system works with LLM interactions
    print(f"\n1Ô∏è‚É£2Ô∏è‚É£ LLM Interaction Workflow:")
    print("""
    üîÑ PII Protection Workflow:
    
    1. User Input ‚Üí PII Detection ‚Üí Store Mappings ‚Üí Sanitize ‚Üí Send to LLM
       ‚Üì
    2. LLM Response ‚Üí Unmask using stored mappings ‚Üí Return to User
       ‚Üì
    3. Clear mappings for security
    
    Key Benefits:
    ‚úÖ No PII sent to external LLM providers
    ‚úÖ Original data preserved in secure mappings
    ‚úÖ Can restore original values when needed
    ‚úÖ Automatic cleanup for security
    """)
    
    print("\nüéâ PII Masking/Unmasking Test Complete!")
    print("‚úÖ System successfully masks PII and can unmask it using stored mappings")

if __name__ == "__main__":
    test_pii_masking_unmasking()
